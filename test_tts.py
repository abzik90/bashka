# from TTS.utils.manage import ModelManager
# from TTS.utils.synthesizer import Synthesizer

# path = "/home/nurbol/.local/lib/python3.10/site-packages/TTS/.models.json"

# model_manager = ModelManager(path)
# model_path, config_path, model_item = model_manager.download_model("tts_models/multilingual/multi-dataset/xtts_v1.1")
# print(model_path, config_path)
# synthesizer = Synthesizer(
#     tts_checkpoint=model_path,
#     tts_config_path=config_path
# )

# text = "This is a test TTS speech generated from Bark TTS model. –ë–∞—Ä–∫ —è–≤–ª—è–µ—Ç—Å—è –º—É–ª—å—Ç–∏–ª–∏–Ω–≥—É–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –≥–æ–ª–æ—Å"
# output = synthesizer.tts(text)
# synthesizer.save_wav(output, "bark.wav")

# import torch
from TTS.api import TTS
import sounddevice as sd

# Get device
device = "cuda" # if torch.cuda.is_available() else "cpu"

# List available üê∏TTS models
print(TTS().list_models())

# Init TTS
tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2", progress_bar=True).to("cuda")

# Run TTS
# ‚ùó Since this model is multi-lingual voice cloning model, we must set the target speaker_wav and language
# Text to speech list of amplitude values as output
# wav = tts.tts(text="", speaker_wav="./source.wav", language="en")
# Text to speech to a file
text="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ (TTS) –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ —Ä–µ—á–∏, –ø–æ–∑–≤–æ–ª—è—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –∏ –¥—Ä—É–≥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—Å–ª—É—Ö. –û–Ω–∞ —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–∞—Ö, –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
# tts.tts_to_file(, speaker_wav="./source.wav", language="ru", file_path="output1.wav")

wav = tts.tts(text=text, speaker_wav="./sources/source.wav", language="ru", speed=1.5)

# Play the speech
sd.play(wav, samplerate=22050)
sd.wait()  # Wait until the audio is finished playing
